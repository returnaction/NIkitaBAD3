@model List<PropositionBet>
@{
    ViewData["Title"] = "Play";
}

<div class="container">
    <partial name="_GamesLinks" />

    <hr />
    <div>
        <h2>PropBets</h2>

        @* Add Error message *@

        <div id="propositionBet" class="ropositionBet">
            <img src="/images/props/PropBetLayOut.png" alt="props layout" />
            <div id="diceContainer" class="dice-Container"></div>
        </div>

    </div>
</div>

<script>


    const rolledNumber = 3;
    const diceContainer = document.getElementById('diceContainer');

    // function to create an element with a number of a
    function createDice(numberOfDots) {
        const diceElement = document.createElement('div');
        diceElement.classList.add('dice');

        for (let i = 0; i < numberOfDots; i++) {
            const dot = document.createElement('div');
            dot.classList.add('dot');
            diceElement.appendChild(dot);
        }

        return diceElement;
    }

    function renderDice() {
        let dice1, dice2;

        switch (rolledNumber) {
            case 2:
                dice1 = createDice(1);
                dice2 = createDice(1);
                break;
            case 3:
                dice1 = createDice(2);
                dice2 = createDice(1);
                break;
            case 7:
                dice1 = createDice(5);
                dice2 = createDice(2);
                break;
            case 11:
                dice1 = createDice(6);
                dice2 = createDice(5);
                break;
            case 12:
                dice1 = createDice(6);
                dice2 = createDice(6);
                break;
            default:

                dice1 = null;
                dice2 = null;
        }

        // clean previous dice elements
        diceContainer.innerHTML = '';

        // Append new dice elements
        if (dice1) {
            diceContainer.appendChild(dice1);
        }
        if (dice2) {
            diceContainer.appendChild(dice2);
        }
    }

    // Render dice when DOM content is loaded
    renderDice();


    // Chips logic for representing
    const betAmount = 170 
   
    const chips = [];
    let bet = betAmount;
    // Subtract 100 chips until the remaining bet is less than 100
    while (bet >= 100) {
        chips.push(100);
        bet -= 100;
    }

    // Subtract 25 chips until the remaining bet is less than 25
    while (bet >= 25) {
        chips.push(25);
        bet -= 25;
    }

    // Add the remaining bet as 5 chips
    while (bet > 0) {
        chips.push(5);
        bet -= 5;
    }

    const worldBet = document.getElementById('propositionBet');

    chips.forEach((chip, i) => {
        const chipElement = document.createElement('div');
        let colorClass = 'chip-black';

        if (chip === 25) {
            colorClass = 'chip-green';
        } else if (chip === 5) {
            colorClass = 'chip-red';
        }

        chipElement.classList.add('chip', colorClass);
        chipElement.style = `left: 50%; top: calc(50% - ${i * 5}px); transform: translate(-50%, -50%);`;


        worldBet.appendChild(chipElement);
        if (i === chips.length - 1) {
            const betAmountSpan = document.createElement('span');
            betAmountSpan.innerText = betAmount;
            betAmountSpan.style = 'position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; font-size: 14px;';
            chipElement.appendChild(betAmountSpan);
        }

    });

</script>

